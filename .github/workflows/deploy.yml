name: Deploy to OCI
on:
  push:
    branches: [main]
# 필요한 권한 설정
permissions:
  contents: read
  packages: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # 증분 빌드를 위해 이전 커밋 포함

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23 # Node.js 18 LTS 버전 사용
          cache: 'yarn'

      # Turborepo 캐시 복원
      - name: Restore Turborepo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      # 의존성 설치
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 변경된 앱 감지 - git diff 사용
      - name: Detect changed apps
        id: changes
        run: |
          # Git diff를 사용하여 변경된 파일 확인
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"

          # 기본적으로 모든 앱이 변경되지 않은 것으로 설정
          echo "API_CHANGED=false" >> $GITHUB_ENV
          echo "WEB_CHANGED=false" >> $GITHUB_ENV
          echo "OLLAMA_CHANGED=false" >> $GITHUB_ENV

          # apps/api 디렉토리의 파일이 변경되었는지 확인
          if echo "$CHANGED_FILES" | grep -q "^apps/api/"; then
            echo "API_CHANGED=true" >> $GITHUB_ENV
            echo "API 변경 감지됨"
          fi

          # apps/web 디렉토리의 파일이 변경되었는지 확인
          if echo "$CHANGED_FILES" | grep -q "^apps/web/"; then
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
            echo "Web 변경 감지됨"
          fi
          
          # apps/ollama 디렉토리의 파일이 변경되었는지 확인
          if echo "$CHANGED_FILES" | grep -q "^apps/ollama/"; then
            echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
            echo "Ollama 변경 감지됨"
          fi

          # packages 디렉토리의 파일이 변경되었는지 확인 (공통 패키지)
          if echo "$CHANGED_FILES" | grep -q "^packages/"; then
            echo "API_CHANGED=true" >> $GITHUB_ENV
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
            echo "공통 패키지 변경 감지됨"
          fi

          # 변경사항이 없으면 모든 앱을 다시 빌드
          if [ "$API_CHANGED" = "false" ] && [ "$WEB_CHANGED" = "false" ] && [ "$OLLAMA_CHANGED" = "false" ]; then
            echo "변경사항 없음, 모든 앱 빌드 예정"
            echo "API_CHANGED=true" >> $GITHUB_ENV
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
            echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Set lowercase owner name
        run: |
          echo "OWNER_LOWERCASE=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker 레이어 캐싱
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-buildx-

      # API 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push API Docker image
        if: env.API_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./apps/api
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-api:latest
          target: production
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max

      # 웹 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push Web Docker image
        if: env.WEB_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./apps/web
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-web:latest
          target: production
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-web
          cache-to: type=local,dest=/tmp/.buildx-cache-web-new,mode=max

      # Ollama 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push Ollama Docker image
        if: env.OLLAMA_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./apps/ollama
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-ollama:latest
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-ollama
          cache-to: type=local,dest=/tmp/.buildx-cache-ollama-new,mode=max

      # 캐시 업데이트
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-api /tmp/.buildx-cache-web /tmp/.buildx-cache-ollama
          mkdir -p /tmp/.buildx-cache-api /tmp/.buildx-cache-web /tmp/.buildx-cache-ollama
          [ -d "/tmp/.buildx-cache-api-new" ] && cp -R /tmp/.buildx-cache-api-new/* /tmp/.buildx-cache-api/ || true
          [ -d "/tmp/.buildx-cache-web-new" ] && cp -R /tmp/.buildx-cache-web-new/* /tmp/.buildx-cache-web/ || true
          [ -d "/tmp/.buildx-cache-ollama-new" ] && cp -R /tmp/.buildx-cache-ollama-new/* /tmp/.buildx-cache-ollama/ || true

      # 이미지 패키지를 공개로 설정
      - name: Make packages public
        run: |
          echo "GitHub 패키지를 공개로 설정합니다..."
          curl -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/user/packages/container/${{ env.REPO_LOWERCASE }}-api/visibility \
            -d '{"visibility":"public"}'

          curl -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/user/packages/container/${{ env.REPO_LOWERCASE }}-web/visibility \
            -d '{"visibility":"public"}'
            
          curl -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/user/packages/container/${{ env.REPO_LOWERCASE }}-ollama/visibility \
            -d '{"visibility":"public"}'

      # SSH를 통한 OCI 인스턴스 배포
      - name: Deploy to OCI instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 배포 디렉토리 생성
            mkdir -p ~/bot-haesim-deploy

            # 환경 변수 설정
            OWNER_LOWERCASE="${{ env.OWNER_LOWERCASE }}"
            REPO_LOWERCASE="${{ env.REPO_LOWERCASE }}"

            # GitHub Container Registry 로그인 (PAT 토큰 사용)
            if [ ! -z "${{ secrets.GH_PAT }}" ]; then
              echo "GitHub Container Registry에 로그인 시도..."
              echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            fi

            # 변경된 이미지만 가져오기
            if [ "${{ env.API_CHANGED }}" = "true" ]; then
              echo "Pulling new API image..."
              docker pull ghcr.io/$OWNER_LOWERCASE/$REPO_LOWERCASE-api:latest
            fi

            if [ "${{ env.WEB_CHANGED }}" = "true" ]; then
              echo "Pulling new Web image..."
              docker pull ghcr.io/$OWNER_LOWERCASE/$REPO_LOWERCASE-web:latest
            fi
            
            if [ "${{ env.OLLAMA_CHANGED }}" = "true" ]; then
              echo "Pulling new Ollama image..."
              docker pull ghcr.io/$OWNER_LOWERCASE/$REPO_LOWERCASE-ollama:latest
            fi

            # docker-compose.yml 생성
            cat > ~/bot-haesim-deploy/docker-compose.yml << 'EOF'
            services:
              api:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-api:latest
                ports:
                  - '3000:3000'
                restart: unless-stopped
                environment:
                  - PORT=3000
                  - BOT_ACCESS_TOKEN=${BOT_ACCESS_TOKEN}
                  - DOMAIN_NAME=${DOMAIN_NAME}
                  - BOT_NAME=${BOT_NAME}
                  - BOT_USERNAME=${BOT_USERNAME}
                  - BOT_ID=${BOT_ID}
                  - DB_USERNAME=ADMIN
                  - DB_PASSWORD=${DB_PASSWORD}
                  - NODE_ENV=production
                networks:
                  - app-network

              web:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-web:latest
                ports:
                  - '3001:3000'
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - NEXT_PUBLIC_API_URL=http://api:3000
                networks:
                  - app-network
                depends_on:
                  - api
                  
              ollama:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-ollama:latest
                ports:
                  - "11434:11434"
                restart: unless-stopped
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge
            EOF

            # 환경 변수 파일 생성
            cat > ~/bot-haesim-deploy/.env << EOF
            OWNER_LOWERCASE=$OWNER_LOWERCASE
            REPO_LOWERCASE=$REPO_LOWERCASE
            BOT_ACCESS_TOKEN=${{ secrets.BOT_ACCESS_TOKEN }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            BOT_NAME=${{ secrets.BOT_NAME }}
            BOT_USERNAME=${{ secrets.BOT_USERNAME }}
            BOT_ID=${{ secrets.BOT_ID }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            EOF

            # 컨테이너 실행
            cd ~/bot-haesim-deploy
            docker-compose down || true
            docker-compose up -d

            # 더 적극적인 이미지 정리 (12시간 이내 사용되지 않은 이미지)
            docker image prune -a -f --filter "until=12h"
