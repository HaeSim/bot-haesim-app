name: Deploy to OCI
on:
  push:
    branches: [main]
# 필요한 권한 설정
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  # 변경 감지 및 의존성 그래프 분석 작업
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ env.API_CHANGED }}
      web_changed: ${{ env.WEB_CHANGED }}
      ollama_changed: ${{ env.OLLAMA_CHANGED }}
      owner_lowercase: ${{ env.OWNER_LOWERCASE }}
      repo_lowercase: ${{ env.REPO_LOWERCASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # 증분 빌드를 위해 이전 커밋 포함

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23
          cache: 'yarn'

      # 의존성 설치 - 경량화된 설정
      - name: Install essential dependencies
        run: yarn install --frozen-lockfile

      # 변경된 앱 감지 - git diff 사용 + Turborepo 의존성 그래프 활용
      - name: Detect changed apps
        id: changes
        run: |
          # 기본적으로 모든 앱이 변경된 것으로 설정 (초기 실행 또는 얕은 히스토리 대응)
          echo "API_CHANGED=true" >> $GITHUB_ENV
          echo "WEB_CHANGED=true" >> $GITHUB_ENV
          echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV

          # Git 히스토리가 있는지 확인
          if git rev-parse HEAD~1 > /dev/null 2>&1; then
            echo "이전 커밋 히스토리가 존재합니다. 변경된 파일을 분석합니다."
            # Git diff를 사용하여 변경된 파일 확인
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "Changed files: $CHANGED_FILES"
            
            # 기본적으로 모든 앱이 변경되지 않은 것으로 재설정
            echo "API_CHANGED=false" >> $GITHUB_ENV
            echo "WEB_CHANGED=false" >> $GITHUB_ENV
            echo "OLLAMA_CHANGED=false" >> $GITHUB_ENV

            # 공통 파일 검사 (docker-compose.yml, .dockerignore 등)
            if echo "$CHANGED_FILES" | grep -q "^docker-compose.yml\|^.dockerignore"; then
              echo "공통 Docker 설정 파일 변경 감지됨"
              echo "API_CHANGED=true" >> $GITHUB_ENV
              echo "WEB_CHANGED=true" >> $GITHUB_ENV
              echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
            fi

            # apps/api 디렉토리의 파일이 변경되었는지 확인
            if echo "$CHANGED_FILES" | grep -q "^apps/api/"; then
              echo "API_CHANGED=true" >> $GITHUB_ENV
              echo "API 변경 감지됨"
            fi

            # apps/web 디렉토리의 파일이 변경되었는지 확인
            if echo "$CHANGED_FILES" | grep -q "^apps/web/"; then
              echo "WEB_CHANGED=true" >> $GITHUB_ENV
              echo "Web 변경 감지됨"
            fi

            # apps/ollama 디렉토리의 파일이 변경되었는지 확인
            if echo "$CHANGED_FILES" | grep -q "^apps/ollama/"; then
              echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
              echo "Ollama 변경 감지됨"
            fi

            # packages 디렉토리의 파일이 변경되었는지 확인하고 의존성 그래프 분석
            if echo "$CHANGED_FILES" | grep -q "^packages/"; then
              echo "패키지 변경 감지됨, 의존성 그래프 분석..."
              
              # 변경된 패키지들 식별
              CHANGED_PACKAGES=$(echo "$CHANGED_FILES" | grep "^packages/" | cut -d "/" -f2 | sort -u)
              
              for package in $CHANGED_PACKAGES; do
                echo "변경된 패키지: $package"
                
                # 패키지가 api에 영향을 미치는지 확인
                if yarn --silent turbo run build --dry=json --filter="api...[packages/$package]" 2>/dev/null | grep -q "api"; then
                  echo "패키지 $package는 API에 영향을 줍니다"
                  echo "API_CHANGED=true" >> $GITHUB_ENV
                fi
                
                # 패키지가 web에 영향을 미치는지 확인
                if yarn --silent turbo run build --dry=json --filter="web...[packages/$package]" 2>/dev/null | grep -q "web"; then
                  echo "패키지 $package는 Web에 영향을 줍니다"
                  echo "WEB_CHANGED=true" >> $GITHUB_ENV
                fi
              done
            fi

            # 워크플로우 파일이 변경되었는지 확인
            if echo "$CHANGED_FILES" | grep -q "^.github/workflows/"; then
              echo "워크플로우 파일 변경 감지됨, 모든 앱 빌드"
              echo "API_CHANGED=true" >> $GITHUB_ENV
              echo "WEB_CHANGED=true" >> $GITHUB_ENV
              echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
            fi
          else
            echo "이전 커밋 히스토리가 감지되지 않았습니다. 초기 실행으로 간주하여 모든 앱을 빌드합니다."
          fi

      - name: Set lowercase owner name
        run: |
          echo "OWNER_LOWERCASE=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)" >> $GITHUB_ENV

  # API 이미지 빌드 작업 (병렬 처리)
  build-api:
    needs: analyze-changes
    if: ${{ needs.analyze-changes.outputs.api_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 23
          cache: 'yarn'

      # Turborepo 캐시 복원
      - name: Restore Turborepo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-api-${{ hashFiles('**/yarn.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-api-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-turbo-api-

      # 의존성 설치
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 변경된 앱 감지 - git diff 사용 + Turborepo 의존성 그래프 활용
      - name: Detect changed apps
        id: changes
        run: |
          # Git diff를 사용하여 변경된 파일 확인
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"

          # 기본적으로 모든 앱이 변경되지 않은 것으로 설정
          echo "API_CHANGED=false" >> $GITHUB_ENV
          echo "WEB_CHANGED=false" >> $GITHUB_ENV
          echo "OLLAMA_CHANGED=false" >> $GITHUB_ENV

          # 공통 파일 검사 (docker-compose.yml, .dockerignore 등)
          if echo "$CHANGED_FILES" | grep -q "^docker-compose.yml\|^.dockerignore"; then
            echo "공통 Docker 설정 파일 변경 감지됨"
            echo "API_CHANGED=true" >> $GITHUB_ENV
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
            echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
          fi

          # apps/api 디렉토리의 파일이 변경되었는지 확인
          if echo "$CHANGED_FILES" | grep -q "^apps/api/"; then
            echo "API_CHANGED=true" >> $GITHUB_ENV
            echo "API 변경 감지됨"
          fi

          # apps/web 디렉토리의 파일이 변경되었는지 확인
          if echo "$CHANGED_FILES" | grep -q "^apps/web/"; then
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
            echo "Web 변경 감지됨"
          fi

          # apps/ollama 디렉토리의 파일이 변경되었는지 확인
          if echo "$CHANGED_FILES" | grep -q "^apps/ollama/"; then
            echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
            echo "Ollama 변경 감지됨"
          fi

          # packages 디렉토리의 파일이 변경되었는지 확인하고 의존성 그래프 분석
          if echo "$CHANGED_FILES" | grep -q "^packages/"; then
            echo "패키지 변경 감지됨, 의존성 그래프 분석..."
            
            # 변경된 패키지들 식별
            CHANGED_PACKAGES=$(echo "$CHANGED_FILES" | grep "^packages/" | cut -d "/" -f2 | sort -u)
            
            for package in $CHANGED_PACKAGES; do
              echo "변경된 패키지: $package"
              
              # 패키지가 api에 영향을 미치는지 확인
              if yarn --silent turbo run build --dry=json --filter="api...[packages/$package]" 2>/dev/null | grep -q "api"; then
                echo "패키지 $package는 API에 영향을 줍니다"
                echo "API_CHANGED=true" >> $GITHUB_ENV
              fi
              
              # 패키지가 web에 영향을 미치는지 확인
              if yarn --silent turbo run build --dry=json --filter="web...[packages/$package]" 2>/dev/null | grep -q "web"; then
                echo "패키지 $package는 Web에 영향을 줍니다"
                echo "WEB_CHANGED=true" >> $GITHUB_ENV
              fi
            done
          fi

          # 워크플로우 파일이 변경되었는지 확인
          if echo "$CHANGED_FILES" | grep -q "^.github/workflows/"; then
            echo "워크플로우 파일 변경 감지됨, 모든 앱 빌드"
            echo "API_CHANGED=true" >> $GITHUB_ENV
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
            echo "OLLAMA_CHANGED=true" >> $GITHUB_ENV
          fi

          # 변경사항이 없으면 모든 앱을 다시 빌드하지 않음
          if [ "$(echo $API_CHANGED)" = "false" ] && [ "$(echo $WEB_CHANGED)" = "false" ] && [ "$(echo $OLLAMA_CHANGED)" = "false" ]; then
            echo "변경사항 없음, 빌드 건너뜀"
          fi

      - name: Set lowercase owner name
        run: |
          echo "OWNER_LOWERCASE=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)" >> $GITHUB_ENV

      # GitHub Container Registry 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 로그인 상태 확인
      - name: Check Docker login status
        run: |
          echo "Docker 로그인 상태 확인..."
          docker info

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker 레이어 캐싱
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-buildx-

      # API 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push API Docker image
        id: build-api
        if: env.API_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-api:latest
          target: production
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
          build-args: |
            NODE_ENV=production
          outputs: type=image,name=target
          provenance: false
        continue-on-error: true

      # API 이미지 빌드 결과 확인
      - name: Check API image build result
        if: env.API_CHANGED == 'true'
        run: |
          echo "API 이미지 빌드 결과 확인..."
          if [ "${{ steps.build-api.outcome }}" == "success" ]; then
            echo "API 이미지 빌드 성공"
            echo "API_BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "API 이미지 빌드 실패"
            echo "API_BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi
          docker image ls | grep "${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-api" || echo "API 이미지가 빌드되지 않았습니다."

      # 웹 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push Web Docker image
        id: build-web
        if: env.WEB_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-web:latest
          target: production
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-web
          cache-to: type=local,dest=/tmp/.buildx-cache-web-new,mode=max
          build-args: |
            NODE_ENV=production
          outputs: type=image,name=target
          provenance: false
        continue-on-error: true

      # Web 이미지 빌드 결과 확인
      - name: Check Web image build result
        if: env.WEB_CHANGED == 'true'
        run: |
          echo "Web 이미지 빌드 결과 확인..."
          if [ "${{ steps.build-web.outcome }}" == "success" ]; then
            echo "Web 이미지 빌드 성공"
            echo "WEB_BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Web 이미지 빌드 실패"
            echo "WEB_BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi
          docker image ls | grep "${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-web" || echo "Web 이미지가 빌드되지 않았습니다."

      # Ollama 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push Ollama Docker image
        id: build-ollama
        if: env.OLLAMA_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./apps/ollama
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-ollama:latest
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-ollama
          cache-to: type=local,dest=/tmp/.buildx-cache-ollama-new,mode=max
          outputs: type=image,name=target
          provenance: false
          no-cache: false
        continue-on-error: true

      # Ollama 이미지 빌드 결과 확인
      - name: Check Ollama image build result
        if: env.OLLAMA_CHANGED == 'true'
        run: |
          echo "Ollama 이미지 빌드 결과 확인..."
          if [ "${{ steps.build-ollama.outcome }}" == "success" ]; then
            echo "Ollama 이미지 빌드 성공"
            echo "OLLAMA_BUILD_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Ollama 이미지 빌드 실패"
            echo "OLLAMA_BUILD_SUCCESS=false" >> $GITHUB_ENV
          fi
          docker image ls | grep "${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-ollama" || echo "Ollama 이미지가 빌드되지 않았습니다."

      # 캐시 업데이트
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-api /tmp/.buildx-cache-web /tmp/.buildx-cache-ollama
          mkdir -p /tmp/.buildx-cache-api /tmp/.buildx-cache-web /tmp/.buildx-cache-ollama
          [ -d "/tmp/.buildx-cache-api-new" ] && cp -R /tmp/.buildx-cache-api-new/* /tmp/.buildx-cache-api/ || true
          [ -d "/tmp/.buildx-cache-web-new" ] && cp -R /tmp/.buildx-cache-web-new/* /tmp/.buildx-cache-web/ || true
          [ -d "/tmp/.buildx-cache-ollama-new" ] && cp -R /tmp/.buildx-cache-ollama-new/* /tmp/.buildx-cache-ollama/ || true

      # 이미지 패키지를 공개로 설정
      - name: Make packages public
        run: |
          echo "GitHub 패키지를 공개로 설정합니다..."

          # 패키지 가시성 설정 함수
          set_package_visibility() {
            local package_name=$1
            echo "패키지 $package_name 가시성 설정 시도..."
            
            # 패키지 존재 여부 확인
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/orgs/${{ env.OWNER_LOWERCASE }}/packages/container/$package_name")
            
            if [ "$STATUS" = "200" ]; then
              # 조직 패키지인 경우
              curl -X PATCH \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/orgs/${{ env.OWNER_LOWERCASE }}/packages/container/$package_name/visibility" \
                -d '{"visibility":"public"}'
              echo "조직 패키지 $package_name 가시성 설정 완료"
            else
              # 사용자 패키지인 경우
              curl -X PATCH \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/user/packages/container/$package_name/visibility" \
                -d '{"visibility":"public"}'
              echo "사용자 패키지 $package_name 가시성 설정 완료"
            fi
          }

          # API 패키지 가시성 설정
          set_package_visibility "${{ env.REPO_LOWERCASE }}-api"

          # Web 패키지 가시성 설정
          set_package_visibility "${{ env.REPO_LOWERCASE }}-web"

          # Ollama 패키지 가시성 설정
          set_package_visibility "${{ env.REPO_LOWERCASE }}-ollama"

      # SSH를 통한 OCI 인스턴스 배포
      - name: Deploy to OCI instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: OWNER_LOWERCASE,REPO_LOWERCASE,API_CHANGED,WEB_CHANGED,OLLAMA_CHANGED,API_BUILD_SUCCESS,WEB_BUILD_SUCCESS,OLLAMA_BUILD_SUCCESS
          script: |
            # 배포 디렉토리 생성
            mkdir -p ~/bot-haesim-deploy

            # 환경 변수 설정
            OWNER_LOWERCASE="${OWNER_LOWERCASE}"
            REPO_LOWERCASE="${REPO_LOWERCASE}"

            # 디버깅 정보 출력
            echo "디버깅 정보:"
            echo "OWNER_LOWERCASE: $OWNER_LOWERCASE"
            echo "REPO_LOWERCASE: $REPO_LOWERCASE"
            echo "API_CHANGED: ${API_CHANGED}"
            echo "WEB_CHANGED: ${WEB_CHANGED}"
            echo "OLLAMA_CHANGED: ${OLLAMA_CHANGED}"
            echo "API_BUILD_SUCCESS: ${API_BUILD_SUCCESS:-false}"
            echo "WEB_BUILD_SUCCESS: ${WEB_BUILD_SUCCESS:-false}"
            echo "OLLAMA_BUILD_SUCCESS: ${OLLAMA_BUILD_SUCCESS:-false}"

            # GitHub Container Registry 로그인 (PAT 토큰 사용)
            if [ ! -z "${{ secrets.GH_PAT }}" ]; then
              echo "GitHub Container Registry에 로그인 시도..."
              echo "${{ secrets.GH_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            else
              echo "경고: GH_PAT 시크릿이 설정되지 않았습니다."
            fi

            # 사용 가능한 이미지 확인
            echo "사용 가능한 이미지 목록 확인:"
            docker image ls | grep "$OWNER_LOWERCASE/$REPO_LOWERCASE" || echo "로컬에 이미지가 없습니다."

            # 이미지 존재 여부 확인 및 가져오기 함수
            check_and_pull_image() {
              local service=$1
              local image_name="ghcr.io/$OWNER_LOWERCASE/$REPO_LOWERCASE-$service:latest"
              local changed=$2
              local build_success=$3
              
              echo "서비스: $service, 변경됨: $changed, 빌드 성공: $build_success"
              
              # 빌드가 성공했거나 이미지가 이미 존재하는 경우에만 진행
              if [ "$build_success" = "true" ] || [ "$changed" = "false" ]; then
                # 이미지 존재 여부 확인
                if curl -s -f -H "Authorization: token ${{ secrets.GH_PAT }}" \
                  "https://api.github.com/user/packages/container/$REPO_LOWERCASE-$service" > /dev/null; then
                  echo "$service 이미지가 레지스트리에 존재합니다."
                  
                  if [ "$changed" = "true" ] || ! docker image inspect "$image_name" > /dev/null 2>&1; then
                    echo "$service 이미지 가져오기 시도..."
                    docker pull "$image_name" && echo "$service 이미지 가져오기 성공" || echo "$service 이미지 가져오기 실패"
                  else
                    echo "$service 이미지가 이미 로컬에 존재하고 변경되지 않았습니다."
                  fi
                  return 0
                else
                  echo "$service 이미지가 레지스트리에 존재하지 않습니다."
                  return 1
                fi
              else
                echo "$service 이미지 빌드가 실패했거나 변경되지 않았습니다."
                return 1
              fi
            }

            # 각 서비스 이미지 확인 및 가져오기
            API_EXISTS=true
            WEB_EXISTS=true
            OLLAMA_EXISTS=true

            check_and_pull_image "api" "${API_CHANGED}" "${API_BUILD_SUCCESS:-false}" || API_EXISTS=false
            check_and_pull_image "web" "${WEB_CHANGED}" "${WEB_BUILD_SUCCESS:-false}" || WEB_EXISTS=false
            check_and_pull_image "ollama" "${OLLAMA_CHANGED}" "${OLLAMA_BUILD_SUCCESS:-false}" || OLLAMA_EXISTS=false

            # docker-compose.yml 생성 (존재하는 서비스만 포함)
            cat > ~/bot-haesim-deploy/docker-compose.yml << 'EOF'
            services:
            EOF

            # API 서비스 추가 (존재하는 경우)
            if [ "$API_EXISTS" = "true" ]; then
              cat >> ~/bot-haesim-deploy/docker-compose.yml << 'EOF'
              api:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-api:latest
                ports:
                  - '8080:8080'
                restart: unless-stopped
                environment:
                  - PORT=8080
                  - BOT_ACCESS_TOKEN=${BOT_ACCESS_TOKEN}
                  - DOMAIN_NAME=${DOMAIN_NAME}
                  - BOT_NAME=${BOT_NAME}
                  - BOT_USERNAME=${BOT_USERNAME}
                  - BOT_ID=${BOT_ID}
                  - DB_USERNAME=ADMIN
                  - DB_PASSWORD=${DB_PASSWORD}
                  - NODE_ENV=production
                  - API_PREFIX=
                  - OLLAMA_API_URL=http://ollama:11434
                networks:
                  - app-network
                healthcheck:
                  test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health", "||", "exit", "1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 5s
            EOF
            else
              echo "API 서비스가 존재하지 않아 docker-compose.yml에서 제외됩니다."
            fi

            # Web 서비스 추가 (존재하는 경우)
            if [ "$WEB_EXISTS" = "true" ]; then
              cat >> ~/bot-haesim-deploy/docker-compose.yml << 'EOF'

              web:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-web:latest
                ports:
                  - '3000:3000'
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - NEXT_PUBLIC_API_URL=/api
                  - API_SERVER_URL=http://api:8080
                  - OLLAMA_API_URL=http://ollama:11434
                networks:
                  - app-network
                healthcheck:
                  test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000", "||", "exit", "1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 5s
            EOF
              
              # API 서비스가 존재하는 경우에만 의존성 추가
              if [ "$API_EXISTS" = "true" ]; then
                cat >> ~/bot-haesim-deploy/docker-compose.yml << 'EOF'
                depends_on:
                  - api
            EOF
              fi
            else
              echo "Web 서비스가 존재하지 않아 docker-compose.yml에서 제외됩니다."
            fi

            # Ollama 서비스 추가 (존재하는 경우)
            if [ "$OLLAMA_EXISTS" = "true" ]; then
              cat >> ~/bot-haesim-deploy/docker-compose.yml << 'EOF'
                  
              ollama:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-ollama:latest
                ports:
                  - "11434:11434"
                restart: unless-stopped
                networks:
                  - app-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:11434/api/version", "||", "exit", "1"]
                  interval: 60s
                  timeout: 30s
                  retries: 5
                  start_period: 60s
            EOF
            else
              echo "Ollama 서비스가 존재하지 않아 docker-compose.yml에서 제외됩니다."
            fi

            # 네트워크 설정 추가
            cat >> ~/bot-haesim-deploy/docker-compose.yml << 'EOF'

            networks:
              app-network:
                driver: bridge
            EOF

            # 환경 변수 파일 생성
            cat > ~/bot-haesim-deploy/.env << EOF
            OWNER_LOWERCASE=$OWNER_LOWERCASE
            REPO_LOWERCASE=$REPO_LOWERCASE
            BOT_ACCESS_TOKEN=${{ secrets.BOT_ACCESS_TOKEN }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            BOT_NAME=${{ secrets.BOT_NAME }}
            BOT_USERNAME=${{ secrets.BOT_USERNAME }}
            BOT_ID=${{ secrets.BOT_ID }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            EOF

            # docker-compose.yml 내용 확인
            echo "생성된 docker-compose.yml 내용:"
            cat ~/bot-haesim-deploy/docker-compose.yml

            # 컨테이너 실행 (존재하는 서비스만 재시작)
            cd ~/bot-haesim-deploy

            # 이미지 사전 확인으로 네트워크 대역폭 사용 최적화
            echo "서비스 이미지 상태 확인..."
            for service in api web ollama; do
              if [ -n "$(docker images -q ghcr.io/$OWNER_LOWERCASE/$REPO_LOWERCASE-$service:latest 2>/dev/null)" ]; then
                echo "$service 이미지가 로컬에 존재합니다."
              fi
            done

            # 서비스가 하나라도 존재하는지 확인
            if [ "$API_EXISTS" = "true" ] || [ "$WEB_EXISTS" = "true" ] || [ "$OLLAMA_EXISTS" = "true" ]; then
              echo "서비스를 재시작합니다..."
              
              # 변경된 서비스만 재시작
              if [ "${API_CHANGED}" = "true" ] || [ "${WEB_CHANGED}" = "true" ]; then
                echo "API 또는 Web이 변경되어 모든 서비스를 재시작합니다."
                docker-compose down || true
                docker-compose up -d
              elif [ "${OLLAMA_CHANGED}" = "true" ] && [ "$OLLAMA_EXISTS" = "true" ]; then
                echo "Ollama만 변경되어 Ollama 서비스만 재시작합니다."
                docker-compose stop ollama || true
                docker-compose rm -f ollama || true
                docker-compose up -d ollama
              else
                echo "변경된 서비스가 없거나 빌드에 실패했습니다. 모든 서비스를 재시작합니다."
                docker-compose down || true
                docker-compose up -d
              fi
            else
              echo "실행 가능한 서비스가 없습니다. 배포를 건너뜁니다."
            fi

            # 컨테이너 상태 확인
            echo "컨테이너 상태:"
            docker-compose ps

            # 더 적극적인 이미지 정리 (12시간 이내 사용되지 않은 이미지)
            docker image prune -a -f --filter "until=12h"
