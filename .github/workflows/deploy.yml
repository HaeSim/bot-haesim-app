name: Deploy to OCI
on:
  push:
    branches: [main]
# 필요한 권한 설정
permissions:
  contents: read
  packages: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # 증분 빌드를 위해 이전 커밋 포함

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      # Turborepo 캐시 복원
      - name: Restore Turborepo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      # 의존성 설치
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Turborepo를 사용한 빌드 - 변경된 앱만 빌드
      - name: Build with Turborepo
        run: yarn turbo build --filter="[HEAD^1]"
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ github.repository_owner }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 저장소 이름을 소문자로 변환 (ghcr.io 요구사항)
      - name: Set lowercase owner name
        run: |
          echo "OWNER_LOWERCASE=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_LOWERCASE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)" >> $GITHUB_ENV

      # 변경된 앱 감지
      - name: Detect changed apps
        id: changes
        run: |
          CHANGED_PACKAGES=$(yarn turbo run build --dry=json --filter="[HEAD^1]" | jq -r '.tasks[].command' | grep -v '^$' | awk -F'#' '{print $1}' | sort | uniq)
          echo "Changed packages: $CHANGED_PACKAGES"
          
          if echo "$CHANGED_PACKAGES" | grep -q "apps/api"; then
            echo "API_CHANGED=true" >> $GITHUB_ENV
          else
            echo "API_CHANGED=false" >> $GITHUB_ENV
          fi
          
          if echo "$CHANGED_PACKAGES" | grep -q "apps/web"; then
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
          else
            echo "WEB_CHANGED=false" >> $GITHUB_ENV
          fi
          
          # 변경이 없더라도 공통 패키지가 변경되었을 때 전체 리빌드
          if echo "$CHANGED_PACKAGES" | grep -q "packages/"; then
            echo "API_CHANGED=true" >> $GITHUB_ENV
            echo "WEB_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Docker 레이어 캐싱
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-buildx-

      # API 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push API Docker image
        if: env.API_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./apps/api
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-api:latest
          target: production
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max
          build-args: |
            TURBO_CACHE_KEY=${{ github.sha }}

      # 웹 이미지 빌드 및 푸시 (변경 감지 시에만)
      - name: Build and push Web Docker image
        if: env.WEB_CHANGED == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./apps/web
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-web:latest
          target: production
          platforms: linux/arm64 # OCI VM.Standard.A1.Flex는 ARM64 아키텍처 사용
          cache-from: type=local,src=/tmp/.buildx-cache-web
          cache-to: type=local,dest=/tmp/.buildx-cache-web-new,mode=max
          build-args: |
            TURBO_CACHE_KEY=${{ github.sha }}

      # 캐시 업데이트
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-api /tmp/.buildx-cache-web
          mv /tmp/.buildx-cache-api-new /tmp/.buildx-cache-api || true
          mv /tmp/.buildx-cache-web-new /tmp/.buildx-cache-web || true

      # SSH를 통한 OCI 인스턴스 배포
      - name: Deploy to OCI instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 배포 디렉토리 생성
            mkdir -p ~/bot-haesim-deploy

            # 변경된 이미지만 가져오기
            if [ "${{ env.API_CHANGED }}" = "true" ]; then
              echo "Pulling new API image..."
              docker pull ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-api:latest
            fi
            
            if [ "${{ env.WEB_CHANGED }}" = "true" ]; then
              echo "Pulling new Web image..."
              docker pull ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-web:latest
            fi

            # docker-compose.yml 생성
            cat > ~/bot-haesim-deploy/docker-compose.yml << 'EOF'
            version: '3.8'

            services:
              api:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-api:latest
                ports:
                  - '3000:3000'
                restart: unless-stopped
                environment:
                  - PORT=3000
                  - BOT_ACCESS_TOKEN=${BOT_ACCESS_TOKEN}
                  - DOMAIN_NAME=${DOMAIN_NAME}
                  - BOT_NAME=${BOT_NAME}
                  - BOT_USERNAME=${BOT_USERNAME}
                  - BOT_ID=${BOT_ID}
                  - DB_USERNAME=ADMIN
                  - DB_PASSWORD=${DB_PASSWORD}
                  - NODE_ENV=production
                networks:
                  - app-network

              web:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-web:latest
                ports:
                  - '3001:3000'
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - NEXT_PUBLIC_API_URL=http://api:3000
                networks:
                  - app-network
                depends_on:
                  - api

            networks:
              app-network:
                driver: bridge
            EOF

            # 환경 변수 파일 생성
            cat > ~/bot-haesim-deploy/.env << EOF
            OWNER_LOWERCASE=${{ env.OWNER_LOWERCASE }}
            REPO_LOWERCASE=${{ env.REPO_LOWERCASE }}
            BOT_ACCESS_TOKEN=${{ secrets.BOT_ACCESS_TOKEN }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            BOT_NAME=${{ secrets.BOT_NAME }}
            BOT_USERNAME=${{ secrets.BOT_USERNAME }}
            BOT_ID=${{ secrets.BOT_ID }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            EOF

            # 컨테이너 실행
            cd ~/bot-haesim-deploy
            docker-compose down || true
            docker-compose up -d

            # 더 적극적인 이미지 정리 (12시간 이내 사용되지 않은 이미지)
            docker image prune -a -f --filter "until=12h"