# 예시: GitHub Actions 워크플로우에 Ollama 통합 방법
# 실제 사용 시 .github/workflows/ 디렉토리에 배치해야 합니다

name: Deploy Applications

on:
  push:
    branches: [main]

env:
  OWNER: ${{ github.repository_owner }}
  OWNER_LOWERCASE: ${{ github.repository_owner }}
  REPO: ${{ github.event.repository.name }}
  REPO_LOWERCASE: ${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build API image
      - name: Build and push API Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/api
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-api:latest
          platforms: linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache-api
          cache-to: type=local,dest=/tmp/.buildx-cache-api-new,mode=max

      # Build Web image
      - name: Build and push Web Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/web
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-web:latest
          platforms: linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache-web
          cache-to: type=local,dest=/tmp/.buildx-cache-web-new,mode=max

      # Build Ollama image
      - name: Build and push Ollama Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/ollama
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-ollama:latest
          platforms: linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache-ollama
          cache-to: type=local,dest=/tmp/.buildx-cache-ollama-new,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to OCI instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # API 및 Web 배포
            echo "Pulling new API and Web images..."
            docker pull ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-api:latest
            docker pull ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-web:latest
            
            # Ollama 배포 추가
            echo "Pulling new Ollama image..."
            docker pull ghcr.io/${{ env.OWNER_LOWERCASE }}/${{ env.REPO_LOWERCASE }}-ollama:latest
            
            # docker-compose.yml 구성
            cd ~/bot-haesim-deploy
            
            # docker-compose.yml 파일 생성
            cat > docker-compose.yml << EOF
            version: '3'
            
            services:
              api:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-api:latest
                ports:
                  - '3000:3000'
                restart: unless-stopped
                environment:
                  - PORT=3000
                  - NODE_ENV=production
                networks:
                  - app-network
            
              web:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-web:latest
                ports:
                  - '3001:3000'
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - NEXT_PUBLIC_API_URL=http://api:3000
                networks:
                  - app-network
                depends_on:
                  - api
            
              ollama:
                image: ghcr.io/${OWNER_LOWERCASE}/${REPO_LOWERCASE}-ollama:latest
                ports:
                  - "11434:11434"
                restart: unless-stopped
                networks:
                  - app-network
            
            networks:
              app-network:
                driver: bridge
            EOF
            
            # 컨테이너 재시작
            docker-compose down || true
            docker-compose up -d
            
            # 불필요한 이미지 정리
            docker image prune -a -f --filter "until=12h"